buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

bootJar {
    baseName = 'gs-rest-service'
    version =  '0.1.0'
}


version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath 'org.jooq:jooq-codegen:3.12.1'
        classpath 'nu.studer:gradle-jooq-plugin:3.0.3'
        classpath 'mysql:mysql-connector-java:8.0.11'
    }
}
apply plugin: "io.spring.dependency-management"
apply plugin: 'nu.studer.jooq'

dependencyManagement {
    imports {
        mavenBom 'software.amazon.awssdk:bom:2.0.0-preview-12'
    }
}

dependencies {
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:ses'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
    compile "com.stripe:stripe-java:7.25.0"
    compile 'com.patreon:patreon:0.4.2'
    compile 'org.jooq:jooq:3.12.1'
    compile "org.mockito:mockito-core:2.+"
    implementation group: 'junit', name: 'junit', version: '4.12'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'javax.mail:mail:1.4.7'
    implementation 'mysql:mysql-connector-java:8.0.11'
    jooqRuntime 'mysql:mysql-connector-java:8.0.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile('org.springframework.boot:spring-boot-starter-test')
    compile 'com.squareup.okhttp3:okhttp:3.14.0'
    compile 'com.squareup.retrofit2:retrofit:2.5.0'
    compile 'com.squareup.retrofit2:converter-gson:2.5.0'
    compile('org.springframework.boot:spring-boot-starter-test')
    testCompile "org.mockito:mockito-core:2.+"
    testCompile("junit:junit")
}

jooq {
    version = '3.12.1'
    edition = 'OSS'
    prod(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = 'jdbc:mysql://doormonster.tv:3306/whiteli4_wlhqdata_prod'
            user = 'root'
            password = 'MYSQL_PASSWORD'
            autoCommit = true
            properties {
                property {
                    key = 'ssl'
                    value = 'true'
                }
            }
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                inputSchema = 'whiteli4_wlhqdata_prod'
            }
            target {
                packageName = 'API.databases'
                directory = 'src/main/java'
            }
        }
    }
    dev(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = 'jdbc:mysql://doormonster.tv:3306/whiteli4_wlhqdata_dev'
            user = 'root'
            password = 'MYSQL_PASSWORD'
            autoCommit = true
            properties {
                property {
                    key = 'ssl'
                    value = 'true'
                }
            }
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                inputSchema = 'whiteli4_wlhqdata_dev'
            }
            target {
                packageName = 'API.databases'
                directory = 'src/main/java'
            }
        }
    }
}

tasks.generateProdJooqSchemaSource.with {
    def out = new ByteArrayOutputStream()
    javaExecSpec = { JavaExecSpec s ->
        s.standardOutput = out
        s.errorOutput = out
        s.ignoreExitValue = true
        s.jvmArgs '-Xmx512M'
    }
    execResultHandler = { ExecResult r ->
        if (r.exitValue != 0) {
            throw new RuntimeException('jOOQ source code generation failed:\n\n' + out.toString())
        }
    }
}
